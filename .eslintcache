[{"C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\index.js":"1","C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\App.js":"2","C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\components\\EmployeeList.js":"3","C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\contexts\\EmployeeContext.js":"4","C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\components\\Employee.js":"5","C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\components\\AddForm.js":"6","C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\components\\AddColumnForm.js":"7","C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\components\\EditForm.js":"8","C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\components\\ColumnFormat.js":"9"},{"size":237,"mtime":1651050969606,"results":"10","hashOfConfig":"11"},{"size":454,"mtime":1651050969599,"results":"12","hashOfConfig":"11"},{"size":4506,"mtime":1651820789984,"results":"13","hashOfConfig":"11"},{"size":1409,"mtime":1651821010226,"results":"14","hashOfConfig":"11"},{"size":2228,"mtime":1651219820986,"results":"15","hashOfConfig":"11"},{"size":1908,"mtime":1651820846780,"results":"16","hashOfConfig":"11"},{"size":2319,"mtime":1651525973785,"results":"17","hashOfConfig":"11"},{"size":1593,"mtime":1651233879157,"results":"18","hashOfConfig":"11"},{"size":1002,"mtime":1651580765069,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"mtmol1",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\index.js",[],["41","42"],"C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\App.js",[],"C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\components\\EmployeeList.js",["43"],"C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\contexts\\EmployeeContext.js",[],"C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\components\\Employee.js",["44"],"import {useContext, useState, useEffect} from 'react';\r\nimport {EmployeeContext} from '../contexts/EmployeeContext';\r\nimport { Modal, Button, OverlayTrigger, Tooltip } from 'react-bootstrap';\r\nimport EditForm from './EditForm'\r\n\r\n\r\n\r\nconst Employee = ({employee,id}) => {\r\n\r\n    const {deleteEmployee} = useContext(EmployeeContext)\r\n\r\n    const [show, setShow] = useState(false);\r\n    \r\n    const handleShow = () => setShow(true);\r\n    const handleClose = () => setShow(false);\r\n    useEffect(() => {\r\n        handleClose()\r\n    }, [employee])\r\n\r\n\r\n    return (\r\n        <>\r\n            {Object.values(employee).map((item,index) => {\r\n               if(item !== id){\r\n                   return <td key={`${index}+${item}`}>{item}</td>} \r\n            })}\r\n            <td>\r\n                <OverlayTrigger\r\n                    overlay={\r\n                        <Tooltip id={`tooltip-top`}>\r\n                            Edit\r\n                        </Tooltip>\r\n                    }>\r\n                    <button onClick={handleShow}  className=\"btn text-warning btn-act\" data-toggle=\"modal\"><i className=\"material-icons\">&#xE254;</i></button>\r\n                </OverlayTrigger>\r\n                <OverlayTrigger\r\n                    overlay={\r\n                        <Tooltip id={`tooltip-top`}>\r\n                            Delete\r\n                        </Tooltip>\r\n                    }>\r\n                    <button onClick={() => deleteEmployee(employee.id)}  className=\"btn text-danger btn-act\" data-toggle=\"modal\"><i className=\"material-icons\">&#xE872;</i></button>\r\n                </OverlayTrigger>\r\n                \r\n                \r\n            </td>\r\n\r\n            <Modal show={show} onHide={handleClose}>\r\n        <Modal.Header closeButton>\r\n            <Modal.Title>\r\n                Edit Employee\r\n            </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n                    <EditForm theEmployee={employee} id={employee.id}/>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close Button\r\n                </Button>\r\n        </Modal.Footer>\r\n    </Modal>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Employee;","C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\components\\AddForm.js",["45"],"C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\components\\AddColumnForm.js",[],"C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\components\\EditForm.js",["46"],"import { Form, Button } from \"react-bootstrap\"\r\nimport {EmployeeContext} from '../contexts/EmployeeContext';\r\nimport {useContext, useState} from 'react';\r\n\r\nconst EditForm = ({theEmployee,id}) =>{\r\n\r\n    const { updateEmployee } = useContext(EmployeeContext); \r\n    const [newEmployee, setNewEmployee] = useState(theEmployee)  \r\n    const newEmployeeKeys = Object.keys(newEmployee);\r\n  \r\n    const onInputChange = (e) => {\r\n        setNewEmployee({...newEmployee,[e.target.name]: e.target.value})\r\n    }\r\n   \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        updateEmployee(id, newEmployee)\r\n    }\r\n     return (\r\n\r\n         <Form onSubmit={handleSubmit}>\r\n             {newEmployeeKeys.map((item, index) => {\r\n                 if (newEmployee[item] !== id) {\r\n                     return (\r\n                         <Form.Group key={`${index}+${item}`}>\r\n                             <Form.Control\r\n                             key={`${index}`}\r\n                             type=\"text\"\r\n                             placeholder={newEmployee[item]}\r\n                             name={item}\r\n                             value={newEmployee[item]}\r\n                             onChange={(e) => onInputChange(e)}\r\n                             required\r\n                                 />\r\n                             </Form.Group>\r\n                         )\r\n                 }\r\n             })}\r\n            <Button variant=\"success\" type=\"submit\" block>\r\n                Edit Employee\r\n            </Button>\r\n        </Form>\r\n\r\n     )\r\n}\r\n\r\nexport default EditForm;","C:\\Users\\User\\Desktop\\Политех\\MechLab-Form\\src\\components\\ColumnFormat.js",[],{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","severity":1,"message":"52","line":64,"column":60,"nodeType":"53","messageId":"54","endLine":64,"endColumn":62},{"ruleId":"51","severity":1,"message":"52","line":23,"column":55,"nodeType":"53","messageId":"54","endLine":23,"endColumn":57},{"ruleId":"51","severity":1,"message":"52","line":30,"column":47,"nodeType":"53","messageId":"54","endLine":30,"endColumn":49},{"ruleId":"51","severity":1,"message":"52","line":22,"column":49,"nodeType":"53","messageId":"54","endLine":22,"endColumn":51},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","no-global-assign","no-unsafe-negation"]